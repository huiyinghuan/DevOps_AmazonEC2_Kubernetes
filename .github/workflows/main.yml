name: Deploy Kubernetes Infrastructure

# This specifies when the workflow will run
on:
  push:
    branches:
      - main  # You can adjust this to your specific branch or trigger

# The jobs section defines the steps that are run as part of this workflow
jobs:
  terraform-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install unzip, curl, and openssh-client
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip curl openssh-client jq

    
      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6 

      # Step 3: Configure AWS credentials from GitHub secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2  

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Terraform Plan (Preview changes)
      - name: Terraform Plan
        run: terraform plan

      # Step 6: Terraform Apply (Deploy changes)
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Step 7: Wait for instances to be ready
      - name: Wait for 60 seconds
        run: sleep 10  # Wait for EC2 instances to be fully provisioned

      - name: Check jq Version
        run: jq --version
    
      
      - name: Get Master Public IP and Store in File
        id: get_master_ip
        run: |
          MASTER_PUBLIC_IP=$(terraform output -raw master_public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}' | head -n 1)
          echo "Captured Master Public IP: $MASTER_PUBLIC_IP"
          
          # Store the IP in a file for later use
          echo $MASTER_PUBLIC_IP > master_ip.txt
          
          # Debug message to verify the IP is stored in the file
          cat master_ip.txt

      # Step 8: Read Master IP from File and Use it
      - name: Read Master IP from File and Upload Files
        run: |
          MASTER_PUBLIC_IP=$(cat master_ip.txt)
          echo "Read Master IP: $MASTER_PUBLIC_IP"

      - name: Upload and run scripts on master node
        run: |
          # Create a temporary file for the SSH private key
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > temp_key.pem
          chmod 600 temp_key.pem  # Ensure the key has the right permissions
      
          MASTER_PUBLIC_IP=$(cat master_ip.txt)
          echo "Read Master IP: $MASTER_PUBLIC_IP"
      
          # Upload master_install.sh
          scp -i temp_key.pem -o StrictHostKeyChecking=no master_install.sh ec2-user@$MASTER_PUBLIC_IP:/home/ec2-user/master_install.sh
      
          # Upload deployment.yaml
          scp -i temp_key.pem -o StrictHostKeyChecking=no deployment.yaml ec2-user@$MASTER_PUBLIC_IP:/home/ec2-user/deployment.yaml
      
          # Run the script on the master node
          ssh -i temp_key.pem -o StrictHostKeyChecking=no ec2-user@$MASTER_PUBLIC_IP << EOF
              chmod +x /home/ec2-user/master_install.sh
              /home/ec2-user/master_install.sh
              kubectl apply -f /home/ec2-user/deployment.yaml
          EOF

          # Clean up the temporary key file
          rm temp_key.pem

      # Step 9: Optionally, you can add a step to output the master/worker IPs
      - name: Output IPs
        run: |
          echo "Master Public IP: $(terraform output master_public_ip)"
          echo "Worker Public IPs: $(terraform output worker_public_ips)"
